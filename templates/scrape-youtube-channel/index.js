const token = ai.getConfig('apify_token');
const maxResults = ai.getConfig('maxResults');
const downloadSubtitles = ai.getConfig('downloadSubtitles');
const url = ai.getConfig('url');
const outputVar = ai.getConfig('outputVar');

if (!token || !url || !outputVar) {
  ai.crmLog('Missing required configuration: token, url, or outputVar.');
  return;
}

const apiUrl = `https://api.apify.com/v2/acts/streamers~youtube-scraper/run-sync-get-dataset-items?token=${token}`;

const body = {
  downloadSubtitles: downloadSubtitles === 'true',
  hasCC: false,
  hasLocation: false,
  hasSubtitles: false,
  is360: false,
  is3D: false,
  is4K: false,
  isBought: false,
  isHD: false,
  isHDR: false,
  isLive: false,
  isVR180: false,
  maxResultStreams: 0,
  maxResults: parseInt(maxResults) || 100,
  maxResultsShorts: 0,
  preferAutoGeneratedSubtitles: false,
  saveSubsToKVS: true,
  startUrls: [
    {
      url: url
    }
  ]
};

const toBase64 = (str) => {
  try {
    return btoa(unescape(encodeURIComponent(str)));
  } catch (e) {
    console.error('Failed to convert to Base64: ', e);
    return null;
  }
};

const escapeCSV = (value) => {
  if (value == null) return '';
  value = String(value).replace(/"/g, '""');
  return `"${value}"`;
};

try {
  ai.log("Making API call to Apify...");
  const response = await fetch(apiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body)
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  const data = await response.json();
  ai.log("API call successful. Generating CSV...");

  // Create CSV content
  let csvContent = 'Date,Thumbnail URL,URL,Title,Text,Subtitles,Likes,View Count,Duration\n';
  
  data.forEach(result => {
    const date = escapeCSV(result.date);
    const thumbnailUrl = escapeCSV(result.thumbnailUrl);
    const url = escapeCSV(result.url);
    const title = escapeCSV(result.title);
    const text = escapeCSV(result.text);
    const subtitles = escapeCSV(result.subtitles && result.subtitles[0] ? result.subtitles[0].srt : '');
    const likes = escapeCSV(result.likes);
    const viewCount = escapeCSV(result.viewCount);
    const duration = escapeCSV(result.duration);
    
    csvContent += `${date},${thumbnailUrl},${url},${title},${text},${subtitles},${likes},${viewCount},${duration}\n`;
  });

  // Convert to Base64
  const base64String = toBase64(csvContent);
  
  // Upload file
  ai.log("Uploading CSV file...");
  const fileUrl = await ai.uploadFile(base64String, 'text/csv', 'base64');

  ai.vars[outputVar] = fileUrl;
  ai.log('CSV file generated and uploaded successfully.');
} catch (error) {
  ai.crmLog(`Error during process: ${error.message}`);
  ai.vars[outputVar] = 'Error occurred during the process';
}